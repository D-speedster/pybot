import os
import sys
import json
import sqlite3
import shutil
import browser_cookie3
import argparse
from pathlib import Path

def extract_cookies_from_browser(browser_name='chrome', domain='.youtube.com'):
    """Extract cookies from browser for a specific domain"""
    try:
        if browser_name.lower() == 'chrome':
            cookies = browser_cookie3.chrome(domain_name=domain)
        elif browser_name.lower() == 'firefox':
            cookies = browser_cookie3.firefox(domain_name=domain)
        elif browser_name.lower() == 'edge':
            cookies = browser_cookie3.edge(domain_name=domain)
        elif browser_name.lower() == 'opera':
            cookies = browser_cookie3.opera(domain_name=domain)
        elif browser_name.lower() == 'brave':
            cookies = browser_cookie3.brave(domain_name=domain)
        else:
            print(f"❌ مرورگر {browser_name} پشتیبانی نمی‌شود.")
            return None
            
        return cookies
    except Exception as e:
        print(f"❌ خطا در استخراج کوکی‌ها: {str(e)}")
        return None

def save_cookies_to_file(cookies, output_file='cookies.txt'):
    """Save cookies to Netscape format file for yt-dlp"""
    if not cookies:
        return False
        
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# This file is generated by extract_cookies.py. Do not edit.\n\n")
            
            for cookie in cookies:
                secure = 'TRUE' if cookie.secure else 'FALSE'
                http_only = 'TRUE' if cookie.has_nonstandard_attr('HttpOnly') else 'FALSE'
                expires = int(cookie.expires) if cookie.expires else 0
                
                f.write(f"{cookie.domain}\t{cookie.domain.startswith('.')}\t{cookie.path}\t"
                       f"{secure}\t{expires}\t{cookie.name}\t{cookie.value}\n")
                       
        print(f"✅ کوکی‌ها با موفقیت در فایل {output_file} ذخیره شدند.")
        return True
    except Exception as e:
        print(f"❌ خطا در ذخیره کوکی‌ها: {str(e)}")
        return False

def main():
    parser = argparse.ArgumentParser(description='استخراج کوکی‌های مرورگر برای استفاده در yt-dlp')
    parser.add_argument('--browser', '-b', default='chrome', 
                        choices=['chrome', 'firefox', 'edge', 'opera', 'brave'],
                        help='نام مرورگر برای استخراج کوکی‌ها')
    parser.add_argument('--domain', '-d', default='.youtube.com',
                        help='دامنه برای استخراج کوکی‌ها')
    parser.add_argument('--output', '-o', default='cookies.txt',
                        help='مسیر فایل خروجی')
    
    args = parser.parse_args()
    
    print(f"🔍 در حال استخراج کوکی‌های {args.domain} از مرورگر {args.browser}...")
    cookies = extract_cookies_from_browser(args.browser, args.domain)
    
    if cookies:
        save_cookies_to_file(cookies, args.output)
        print("\n💡 برای استفاده از این کوکی‌ها در yt-dlp، از دستور زیر استفاده کنید:")
        print(f"    yt-dlp --cookies {args.output} [URL]")
        print("\n💡 یا در کد Python:")
        print(f"    ydl_opts = {{'cookiefile': '{args.output}'}}")

if __name__ == "__main__":
    main()