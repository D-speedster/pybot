# Production Docker Compose Configuration
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  telegram-bot:
    # Production-specific overrides
    restart: always
    
    # Enhanced resource limits for production
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # Production environment variables
    environment:
      - LOG_LEVEL=INFO
      - CONSOLE_LOG_LEVEL=WARNING
      - FILE_LOG_LEVEL=INFO
      - MAX_SESSIONS=5
      - MAX_FILE_SIZE=104857600  # 100MB
      - MAX_CONCURRENT_DOWNLOADS=3
      - RATE_LIMIT_MESSAGES=50
      - RATE_LIMIT_WINDOW=60
      - CONNECTION_RETRIES=10
      - TIMEOUT=60
    
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Health check with longer intervals
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 60s
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Read-only root filesystem (with exceptions)
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    
    # Additional volumes for production
    volumes:
      - ./sessions:/app/sessions
      - ./logs:/app/logs
      - ./temp_downloads:/app/temp_downloads
      - ./userbot_manager.db:/app/userbot_manager.db
      - /etc/localtime:/etc/localtime:ro
    
  # Optional: Add monitoring service
  watchtower:
    image: containrrr/watchtower
    container_name: telegram-bot-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600  # Check every hour
      - WATCHTOWER_INCLUDE_STOPPED=true
    command: telegram-userbot-downloader
    networks:
      - bot-network
    profiles:
      - monitoring
  
  # Optional: Add log aggregation
  logrotate:
    image: alpine:latest
    container_name: telegram-bot-logrotate
    restart: unless-stopped
    volumes:
      - ./logs:/logs
    command: >
      sh -c '
        while true; do
          find /logs -name "*.log" -size +50M -exec truncate -s 10M {} \;
          find /logs -name "*.log.*" -mtime +7 -delete
          sleep 3600
        done
      '
    networks:
      - bot-network
    profiles:
      - maintenance

# Production network configuration
networks:
  bot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-telegram-bot